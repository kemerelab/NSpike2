#ifndef __SPIKE_USER_GUI_H__
#define __SPIKE_USER_GUI_H__

#include <qpushbutton.h>
#include <qtabwidget.h>
#include <qlayout.h>
#include <qtextedit.h>
#include <qlineedit.h>
#include <qlistbox.h>
#include <qcombobox.h>
#include <qradiobutton.h>
#include "spikeGLPane.h"
#include "spike_dsp.h"

extern DigIOInfo digioinfo;

class laserControl : public QDialog {
	Q_OBJECT

    public:
	    laserControl(QWidget *parent = 0, 
		    const char *name = 0, bool model = FALSE, 
		    WFlags fl = 0);
	    ~laserControl();
	    void lineExecuted(void);
	    int  currentLine;
    public slots:
        void    open() { openFile(); };
        void    close() { closeFile(); };
        void    save() { saveFile(); };
        void    send() { sendFileToUser(); };
	void 	startPulseSeq(bool);
	void 	stopPulseSeq(bool);
	void 	updateTimerChan(void);
	void	disableStart() { pulseStart->setEnabled(false); };
	void    selectStimType(int);
	void 	updateTriggeredPulseLen(int);
	void 	updateVelThresh(int);
	void 	updateTriggeredChan(void);
	void 	updateFiltDelay(int);
	void 	updatePhase(int);
	void 	updateRipCoeff1(const QString &);
	void 	updateRipCoeff2(const QString &);
	void 	updateTimeDelay(int);
	void 	updateTimeJitter(int);
	void 	updateRipThresh(int);
	void 	startThetaRipStim(bool);
	void 	stopThetaRipStim(bool);

    protected:
        QWidget     	**w;
        QTabWidget     	*qtab;
        int         	ntabs;
        QMenuBar      	*menuBar;
        QPopupMenu    	*fileMenu;

	int 		openFileID;
	int 		saveFileID;
	int 		closeFileID;
	int 		sendFileID;


        void    	openFile();
	int		fileOpen;
        void    	saveFile();
        void    	closeFile();
        void    	sendFileToUser();

	void 	updateTriggeredTetChan(int tet, int chan);

	/* First tab */

	QLabel		*fileName;
	QTextEdit	*textEdit;
	QLabel		*readme;
	QPushButton  	*pulseStart;
	QPushButton  	*pulseStop;
        QComboBox	*chan_pulse;
       
        /* Second tab */
        QLabel		*tetChanLabel;
        QLabel		*timerChanLabel;
        QComboBox	*chan_stim;

	   
	QButtonGroup	*stimType;
	QRadioButton	*thetaStim;
	QRadioButton	*rippleStim;

        QLabel		*triggeredPulseLenLabel;
        QSpinBox	*triggeredPulseLen;
        QLabel		*velThreshLabel;
        QSpinBox	*velThresh;
        QLabel		*filtDelayLabel;
        QSpinBox	*filtDelay;
        QLabel		*phaseLabel;
        QSpinBox	*phase;
        QLabel		*timeDelayLabel;
        QSpinBox	*timeDelay;
	QLabel		*ripCoeff1Label;
        QLineEdit	*ripCoeff1;
	QLabel		*ripCoeff2Label;
        QLineEdit	*ripCoeff2;
        QLabel		*timeJitterLabel;
        QSpinBox	*timeJitter;
        QLabel		*ripThreshLabel;
        QSpinBox	*ripThresh;

	QPushButton  	*triggeredStart;
	QPushButton  	*triggeredStop;
};

#endif
